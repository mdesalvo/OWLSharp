/*
   Copyright 2012-2024 Marco De Salvo
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

using RDFSharp.Model;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace OWLSharp
{
    /// <summary>
    /// OWL2 validator rule checking for consistency of classes constrained by owl:hasKey relations
    /// </summary>
    internal static class OWLClassKeyRule
    {
        internal static OWLValidatorReport ExecuteRule(OWLOntology ontology)
        {
            #region CheckAreDifferentIndividuals
            bool CheckAreDifferentIndividuals(RDFResource outerIndividual, RDFResource innerIndividual)
                => !outerIndividual.Equals(innerIndividual) && ontology.Data.CheckIsDifferentIndividual(outerIndividual, innerIndividual);
            #endregion

            OWLValidatorReport validatorRuleReport = new OWLValidatorReport();

            //Iterate the classes of the model
            IEnumerator<RDFResource> classesEnumerator = ontology.Model.ClassModel.ClassesEnumerator;
            while (classesEnumerator.MoveNext())
            {
                //Get properties acting as owl:hasKey targets of the current class
                List<RDFResource> keyProperties = ontology.Model.ClassModel.GetKeyPropertiesOf(classesEnumerator.Current);
                if (keyProperties.Count == 0)
                    continue;
                
                //Get individuals being members of the current class
                List<RDFResource> classMembers = ontology.Data.GetIndividualsOf(ontology.Model, classesEnumerator.Current);
                if (classMembers.Count == 0)
                    continue;

                //Iterate individuals of the current class in order to collect values of the owl:hasKey properties
                Dictionary<string, (RDFResource, List<RDFResource>)> keyValueRegister = new Dictionary<string, (RDFResource, List<RDFResource>)>();
                foreach (RDFResource classIndividual in classMembers)
                {
                    //Calculate the key value for the current individual
                    StringBuilder classIndividualKeyValueSB = new StringBuilder();
                    foreach (RDFResource keyProperty in keyProperties)
                        classIndividualKeyValueSB.Append(string.Join(string.Empty, ontology.Data.ABoxGraph[classIndividual, keyProperty, null, null].Select(t => t.Object.ToString())));

                    //Collect the key value of the current individual
                    string classIndividualKeyValue = classIndividualKeyValueSB.ToString();
                    if (!keyValueRegister.ContainsKey(classIndividualKeyValue))
                        keyValueRegister.Add(classIndividualKeyValue, (classesEnumerator.Current, new List<RDFResource>()));
                    keyValueRegister[classIndividualKeyValue].Item2.Add(classIndividual);
                }

                //At this point we have a complete key evaluation for the current class: we keep only keys having 2+ colliding individuals
                keyValueRegister = keyValueRegister.Where(kv => kv.Value.Item2.Count > 1)
                                                   .ToDictionary(kv => kv.Key, kv => kv.Value);

                //There should not be individuals related by owl:differentFrom sharing the same key (this would mean they are the same individual)
                foreach (KeyValuePair<string, (RDFResource, List<RDFResource>)> keyValue in keyValueRegister)
                {
                    if (keyValue.Value.Item2.Any(outerIndividual => keyValue.Value.Item2.Any(innerIndividual => CheckAreDifferentIndividuals(outerIndividual, innerIndividual))))
                        validatorRuleReport.AddEvidence(new OWLValidatorEvidence(
                            OWLEnums.OWLValidatorEvidenceCategory.Error,
                            nameof(OWLClassKeyRule),
                            $"Violation of 'owl:hasKey' constraint on class '{keyValue.Value.Item1}'",
                            $"Revise you data: the same key value was generated by individuals {string.Join(",", keyValue.Value.Item2)} which are in 'owl:differentFrom' relation"));
                }
            }

            return validatorRuleReport;
        }
    }
}